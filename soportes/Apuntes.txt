Proyecto Sistema de Historia Clínica en Laravel
===============================================
https://www.youtube.com/playlist?list=PLS3ZgoVufwTmVTRZnxekoeST-C9OzKzKk

VIDEO 01:
GENERAR NUEVO PROYECTO LARAVEL
==============================
001. Crear proyecto:
	$ composer create-project laravel/laravel clinic "5.7.*"

*** COMMIT 1: "Proyecto Laravel 5.7 nuevo" ***
*** Iniciar repositorio: $ git init ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Proyecto Laravel 5.7 nuevo" ***

VIDEO 02: 
*** Instalación de Laravel ***

VIDEO 03:
CREAR UN HOST VIRTUAL
=====================
002. Agregar el siguiente código al final del archivo C:\Windows\System32\drivers\etc\hosts
    # Host virtual para el proyecto Sistema de Historia Clínica en Laravel (Lado del cliente) 
    127.0.0.1	clinic.com
    NOTA: Editar con el block de notas en modo de administrador.

003. Agregar el siguiente código al final del archivo C:\xampp\apache\conf\extra\httpd-vhosts.conf
    # Host virtual para el proyecto Sistema de Historia Clínica en Laravel (Lado del servidor)
    <VirtualHost *:80>
        DocumentRoot "C:\xampp\htdocs\cursos\02laravel_clinic\clinic\public"
        ServerName clinic.com
    </VirtualHost>
    NOTA: En el archivo C:\xampp\apache\conf\httpd.conf las línea:
        Include conf/extra/httpd-vhosts.conf
    y
        LoadModule rewrite_module modules/mod_rewrite.so
    no deben estar comentada con #.

004. Reiniciar el servidor Apache.

CREAR SISTEMA DE AUTENTICACIÓN
==============================
005. En resources\views\welcome.blade.php cambiar Laravel por Historia Clínica App.

VIDEO 04:
006. Agregar la implementación MustVerifyEmail a la clase User de app\User.php
    ***
    use Illuminate\Foundation\Auth\User as Authenticatable;

    class User extends Authenticatable implements MustVerifyEmail
    {
        use Notifiable;
    ***

007. Crear sistema de autenticación:
    $ php artisan make:auth

*** COMMIT 2: "Crear sistema autenticación" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Crear sistema autenticación" ***
*** Ver todos los commit's: $ git log --pretty=oneline ***

VIDEO 05:
CONFIGURAR BD
=============
008. Establecer juego de caracteres utf8_unicode_ci en config\database.php:
    ***
    'mysql' => [
        'driver' => 'mysql',
        'host' => env('DB_HOST', '127.0.0.1'),
        'port' => env('DB_PORT', '3306'),
        'database' => env('DB_DATABASE', 'forge'),
        'username' => env('DB_USERNAME', 'forge'),
        'password' => env('DB_PASSWORD', ''),
        'unix_socket' => env('DB_SOCKET', ''),
        'charset' => 'utf8',
        'collation' => 'utf8_unicode_ci',
        'prefix' => '',
        'strict' => true,
        'engine' => null,
    ],
    ***

009. Configurar conexión de BD en archivo .env:
    ***
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=clinic
    DB_USERNAME=root
    DB_PASSWORD=
    ***

010. Crear BD clinic en MySQL con el juego de caracteres utf8_unicode_ci

011. Ejecutar migración:
    $ php artisan migrate

*** COMMIT 3: "Configurar BD" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Configurar BD" ***

VERIFICACIÓN DE EMAIL
=====================
012. En routes\web.php reemplazar
        Auth::routes();
    por
        Auth::routes(['verify' => true]);

VIDEO 06:
*** Diseño de diagrama Entidad - Relación (E-R) ***
*** Se recomienda descargar yEd Graph Editor en https://www.yworks.com/downloads#yEd ***

VIDEO 07:
013. Registrarse el Mailtrap en https://mailtrap.io

014. Crear Inbox de nommbre clinic.

015. Copiar credenciales para Laravel y pegarlas en el archivo .env:
    ***
    MAIL_MAILER=smtp
    MAIL_HOST=smtp.mailtrap.io
    MAIL_PORT=2525
    MAIL_USERNAME=635f7f7d9b8246
    MAIL_PASSWORD=d9e996c89b4412
    MAIL_ENCRYPTION=tls
    ***

016. Registrar un usuario de prueba en nuestro proyecto.
    http://clinic.com/register

*** Ir a Mailtrap y verificar el email: https://mailtrap.io/signin ***
*** Resetear contraseña en el proyecto que estamos creando: http://clinic.com/password/reset ***

017. En el archivo .env cambiar la línea:
        APP_URL=http://localhost
    por
        APP_URL=http://clinic.com

*** COMMIT 4: "Verificación de email" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Verificación de email" ***

VIDEO 08:
*** Configuración de Desktop GitHub: ***
*** Descargar Desktop GitHub en https://desktop.github.com e instalar ***
*** En caso de haber iniciado el repositorio: $ git init ***
*** Ejecutar Desktop GitHub y añadir el repositorio del proyecto ***

VIDEO 09:
*** Establecer diagrama E-R para la estructura de roles y permisos. Parte I ***

VIDEO 10:
*** Establecer diagrama E-R para la estructura de roles y permisos. Parte II ***

ESTRUCTURA PARA SISTEMA DE ROLES Y PERMISOS
===========================================
018. Crear migración junto con su modelo de la tabla roles:
    $ php artisan make:model Role -m -c -r

VIDEO 11:
019. Crear migración junto con su modelo de la tabla permissions:
    $ php artisan make:model Permission -m -c -r

020. Modificar el método up en database\migrations\2021_01_31_192808_create_roles_table.php
    para agregar campos a la table roles:
    public function up()
    {
        Schema::create('roles', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->string('slug')->unique();
            $table->string('description')->nullable();
            $table->timestamps();
        });
    }

VIDEO 12:
021. Establecer los atributos de asignación masiva y relaciones entre modelos en app\Role.php:
    ***
    class Role extends Model
    {
        // ATRIBUTOS DE ASIGNACIÓN MASIVA
        protected $fillable = [
            'name', 'description', 'slug'
        ];

        // RELACIONES ENTRE LOS MODELOS
        public function permissions(){
            // Relación uno a muchos
            return $this->hasMany('app\Permission');
        }

        public function users(){
            // Relación muchos a muchos
            return $this->belongsToMany('app\User');
        }
    ***

VIDEO 13:
022. Modificar el método up en database\migrations\2021_01_31_193703_create_permissions_table.php 
    para agregar campos a la table permissions:
    public function up()
    {
        Schema::create('permissions', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->string('slug')->unique();
            $table->string('description')->nullable();
            $table->unsignedInteger('role_id');
            $table->foreign('role_id')->references('id')->on('roles')->onUpdate('cascade')->onDelete('cascade');
            $table->timestamps();
        });
    }

023. Establecer los atributos de asignación masiva y relaciones entre modelos en app\Permission.php:
    ***
    class Permission extends Model
    {
        // ATRIBUTOS DE ASIGNACIÓN MASIVA
        protected $fillable = [
            'name', 'slug', 'description'
        ];

        // RELACIONES ENTRE LOS MODELOS
        public function role(){
            // Relación muchos a uno
            return $this->belongsTo('App\Role');
        }

        public function users(){
            // Relación muchos a muchos
            return $this->belongsToMany('App\User')->withTimestamps();
        }
    ***

024. Establecer las relaciones entre modelos en app\User.php:
    ***
    class User extends Authenticatable implements MustVerifyEmail
    {
    ***
        // RELACIONES ENTRE LOS MODELOS
        public function permissions(){
            // Relación muchos a muchos
            return $this->belongsToMany('app\Permission');
        }

        public function roles(){
            // Relación muchos a muchos
            return $this->belongsToMany('app\Role')->withTimestamps();
        }
    ***

VIDEO 14:
025. Crear tabla pivote en la migración para role_user:
    $ php artisan make:migration create_role_user_table --create=role_user
    NOTA: incluir en la migración los campos:
    role_id	int(10)
    user_id	int(10)

026. Crear tabla pivote en la migración para permission_user:
    $ php artisan make:migration create_permission_user_table --create=permission_user
    NOTA: incluir en la migración los campos:
    permission_id	int(10)
    user_id	int(10)

027. Modificar el método up en database\migrations\2021_02_01_140320_create_role_user_table.php
    para agregar campos y restricciones a la table role_user:
    public function up()
    {
        Schema::create('role_user', function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('role_id');
            $table->foreign('role_id')->references('id')->on('roles')->onUpdate('cascade')->onDelete('cascade');
            $table->unsignedInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade')->onDelete('cascade');
            $table->timestamps();
        });
    }

028. Modificar el método up en database\migrations\2021_02_01_140535_create_permission_user_table.php
    para agregar campos y restricciones a la table permission_user:
    public function up()
    {
        Schema::create('permission_user', function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('permission_id');
            $table->foreign('permission_id')->references('id')->on('permissions')->onUpdate('cascade')->onDelete('cascade');
            $table->unsignedInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade')->onDelete('cascade');
            $table->timestamps();
        });
    }

029. Ejecutar migración:
    $ php artisan migrate

*** En caso de querer deshacer la migración ejecutar: ***
*** $ php artisan migrate:rollback ***

*** COMMIT 5: "Estructura para sistema de roles y permisos" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Estructura roles y permisos" ***

VIDEO 15:
*** Introducción a framework materialize y al motor de plantillas blade de laravel ***

VIDEO 16:
VISTAS Y DISEÑO DE PLANTILLAS
=============================
030. Descargar plantilla basada en el framework materialize en https://bit.ly/2NCb2rS

031. Crear directorios:
    resources\views\theme
    resources\views\theme\backoffice
    resources\views\theme\backoffice\layouts
    resources\views\theme\backoffice\layouts\includes
    resources\views\theme\backoffice\pages
    resources\views\theme\frontoffice
    resources\views\theme\frontoffice\layouts
    resources\views\theme\frontoffice\pages

032. Crear archivos:
    resources\views\theme\backoffice\layouts\admin.blade.php

033. Copiar el contenido del archivo index.html de la plantilla descargada en el archivo 
    admin.blade.php creado anteriormente y modificarla como se muestra a continuación:
    ***
    ***

VIDEO 17:
*** Adaptación del archivo index.html de la plantilla de materialize a nuestro proyecto ***
*** soportes\template\index.html ***

VIDEO 18:
034. Crear directorios:
    public\assets
    public\assets\backoffice
    public\assets\backoffice\css
    public\assets\frontoffice\js
    public\assets\frontoffice
    public\assets\frontoffice\css
    public\assets\frontoffice\js
    public\assets\plugins


035. En el directorio public\assets\backoffice\css copiar todos los archivos css requeridos en 
    resources\views\theme\backoffice\layouts\admin.blade.php de la plantilla descargada
    anteriormente.

036. Copiar el contenido de la carpeta vendor de la plantilla en public\assets\plugins

037. En el directorio public\assets\backoffice\js copiar todos los archivos js requeridos en 
    resources\views\theme\backoffice\layouts\admin.blade.php de la plantilla descargada
    anteriormente.

VIDEO 19:
038. Crear resources\views\theme\backoffice\layouts\includes\head.blade.php
    ***
    ***

039. Crear resources\views\theme\backoffice\layouts\includes\loader.blade.php
    ***
    ***

040. Crear resources\views\theme\backoffice\layouts\includes\header.blade.php
    ***
    ***

041. Crear resources\views\theme\backoffice\layouts\includes\left-sidebar.blade.php
    ***
    ***

042. Crear resources\views\theme\backoffice\layouts\includes\footer.blade.php
    ***

043. Crear resources\views\theme\backoffice\layouts\includes\foot.blade.php
    ***
    ***

VIDEO 20:
*** Insertar yield en resources\views\theme\backoffice\layouts\admin.blade.php ***
*** Insertar yield en resources\views\theme\backoffice\layouts\head.blade.php ***

044. Crear vista resources\views\theme\backoffice\pages\demo.blade.php
    ***
    ***

045. Agregar una ruta demo en routes\web.php
    Route::get('demo', function () {
        return view('theme.backoffice.pages.demo');
    });

VIDEO 21:
*** Pegar las carpeta fonts e images de la plantilla en public\assets y ***
*** adecuar todas las rutas de imagenes y fuentes. ***

*** COMMIT 6: "Vistas y diseño de plantillas" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Vistas y diseño de plantillas" ***

VIDEO 22:
CRUD ROLES
==========
046. Eliminar o comentar todas las rutas de routes\web.php, dejar solo:
    Auth::routes(['verify' => true]);

*** Para ver las rutas existentes escribir ***
*** $ php artisan rout:list ***

047. Agregar la siguiente ruta a routes\web.php:
    // Grupo de rutas del backoffice
    Route::group(['middleware' => ['auth'], 'as' => 'backoffice.'], function(){
        // Route::get('role', 'RoleController@index')->name('role.index');
        Route::resource('role', 'RoleController');
    });

048. Modificar el método index del controlador app\Http\Controllers\RoleController.php
    ***
    ***

VIDEO 23:
049. Crear policia relacionada con el modelo Role:
    $ php artisan make:policy RolePolicy --model=Role

050. Registrar policia en app\Providers\AuthServiceProvider.php
    ***
    class AuthServiceProvider extends ServiceProvider
    {
        ***
        protected $policies = [
            //'App\Model' => 'App\Policies\ModelPolicy',
            'App\Role' => 'App\Policies\RolePolicy',
        ];
    ***

051. En la clase RolePolicy de la policia app\Policies\RolePolicy.php modificar el método create:
    ***
    ***

VIDEO 24:
*** Diseño del formulario resources\views\theme\backoffice\pages\role\create.blade.php (Parte I) ***
052. Crear carpeta resources\views\theme\backoffice\pages\role

053. Crear archivo resources\views\theme\backoffice\pages\role\create.blade.php
    Basado en Materialize (https://materializecss.com/)
    ***
    ***

054. Modificar el método create de la clase RoleController del controlador
    app\Http\Controllers\RoleController.php
    ***
    ***

VIDEO 25:
*** Diseño del formulario resources\views\theme\backoffice\pages\role\create.blade.php (Parte II) ***

055. Modificar el método store de la clase RoleController del controlador
    app\Http\Controllers\RoleController.php
    ***
    ***

VIDEO 26:
*** Configuración de Role/StoreRequest ***

056. Crear request para el método store del controlador Role:
    $ php artisan make:request Role/StoreRequest

057. Modificar el archivo app\Http\Requests\Role\StoreRequest.php
    ***
    ***

058. Añadir el siguiente código en 'use' a app\Http\Controllers\RoleController.php:
    use App\Http\Requests\Role\StoreRequest;

VIDEO 27:
059. Establecer almacenamiento de registros en app\Role.php creando el método store:
    ***
    ***

VIDEO 28:
060. Crear archivo resources\views\theme\backoffice\pages\role\show.blade.php
    Basado en Materialize (https://materializecss.com/)
    ***
    ***

VIDEO 29:
*** Rediseño del método index del controlador app\Http\Controllers\RoleController.php ***

061. Crear archivo resources\views\theme\backoffice\pages\role\index.blade.php
    Basado en Materialize (https://materializecss.com/)
    ***
    ***

VIDEO 30:
061. Crear archivo resources\views\theme\backoffice\pages\role\edit.blade.php
    Basado en Materialize (https://materializecss.com/)
    ***
    ***

062. Modificar el método edit de la clase RoleController del controlador
    app\Http\Controllers\RoleController.php
    ***
    ***

063. Modificar el método update de la clase RoleController del controlador
    app\Http\Controllers\RoleController.php
    ***
    ***

VIDEO 31:
064. Crear request para el método update del controlador Role:
    $ php artisan make:request Role/UpdateRequest

065. Modificar el archivo app\Http\Requests\Role\UpdateRequest.php
    ***
    ***

066. Añadir el siguiente código en 'use' a app\Http\Controllers\RoleController.php:
    use App\Http\Requests\Role\UpdateRequest;

VIDEO 32:
*** Culminación del diseño del método update del controlador app\Http\Controllers\RoleController.php ***

067. Establecer actualización de registros en app\Role.php creando el método my_update:
    ***
    ***

VIDEO 33:
*** Inducción a la Libreria SweetAlert ***
*** https://github.com/realrashid/sweet-alert ***
*** https://realrashid.github.io/sweet-alert/ ***
*** https://github.com/sweetalert2/sweetalert2 ***
*** https://sweetalert2.github.io/ ***

068. Instalación de la Libreria SweetAlert:
    $ composer require realrashid/sweet-alert

*** Se incorpora @include('sweetalert::alert') ***
*** en resources\views\theme\backoffice\layouts\includes\foot.blade.php ***

069. Para configurar la Libreria SweetAlert:
    $ php artisan sweetalert:publish

070. Incorporar en app\Role.php
    Use Alert;

VIDEO 34:
*** Como invocar la libreria SweetAlert de forma local ***

VIDEO 35:
*** Adecuación del archivo resources\views\theme\backoffice\pages\role\show.blade.php ***
*** para eliminar registro ***

VIDEO 36:
071. Modificar el método destroy de la clase RoleController del controlador
    app\Http\Controllers\RoleController.php
    ***
    ***

VIDEO 37:
*** Observaciones a ciertas estandarizaciones de Materialize ***
*** Vaciar table roles ***

072. Crear archivo resources\views\theme\backoffice\layouts\includes\breadcrumbs.blade.php
    Basado en Materialize (https://materializecss.com/)
    ***
    ***

*** COMMIT 7: "CRUD de roles" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "CRUD de roles" ***

VIDEO 38:
*** Repaso de la estructura y documentación del proyecto ***

VIDEO 39:
CRUD PERMISOS
=============
073. Definir ruta en grupo de backoffice del archivo routes\web.php
    ***
    // Grupo de rutas del backoffice
    Route::group(['middleware' => ['auth'], 'as' => 'backoffice.'], function(){
        ***
        Route::resource('permission', 'PermissionController');
    });
    ***

074. Crear policia relacionada con el modelo Permission:
    $ php artisan make:policy PermissionPolicy --model=Permission

075. Registrar policia del modelo Permission en app\Providers\AuthServiceProvider.php
    ***
    protected $policies = [
        ***
        'App\Permission' => 'App\Policies\PermissionPolicy',
    ];
    ***

076. Crear directorio resources\views\theme\backoffice\pages\permission

077. Crear los archivos de vistas del CRUD permisos:
    resources\views\theme\backoffice\pages\permission\create.blade.php
    resources\views\theme\backoffice\pages\permission\edit.blade.php
    resources\views\theme\backoffice\pages\permission\index.blade.php
    resources\views\theme\backoffice\pages\permission\show.blade.php

VIDEO 40:
*** Trabajar vista y método create de permisos ***

078. Modificar el método create del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

079. Editar vista resources\views\theme\backoffice\pages\permission\create.blade.php
    ***
    ***

080. Modificar el método store del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

VIDEO 41:
081. Crear request para el método store del controlador Permission:
    $ php artisan make:request Permission/StoreRequest

082. Incluir llamada del request en el controlador app\Http\Controllers\PermissionController.php
    use App\Http\Requests\Permission\StoreRequest;

083. Agregar método store al modelo app\Permission.php
    ***
    ***

084. Modificar el método authorize de la clase app\Http\Requests\Permission\StoreRequest.php
    ***
    ***

085. Editar el archivo app\Http\Requests\Permission\StoreRequest.php
    ***
    ***

VIDEO 42:
086. Modificar el método show del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

087. Editar resources\views\theme\backoffice\pages\permission\show.blade.php
    ***
    ***

VIDEO 43:
088. Modificar el método index del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

089. Editar resources\views\theme\backoffice\pages\permission\index.blade.php
    ***
    ***

VIDEO 44: 
090. Modificar el método edit del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

091. Editar resources\views\theme\backoffice\pages\permission\edit.blade.php
    ***
    ***

092. Añadir clase Role al controlador app\Http\Controllers\PermissionController.php
    use App\Role;

093. Modificar el método update del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

VIDEO 45:
094. Establecer actualización de registros en app\Permissin.php creando el método my_update:
    ***
    ***

VIDEO 46:
095. Crear request para el método update del controlador Permission:
    $ php artisan make:request Permission/UpdateRequest

096. Modificar el archivo app\Http\Requests\Permission\UpdateRequest.php
    ***
    ***

097. Añadir el siguiente código en 'use' a app\Http\Controllers\PermissionController.php:
    use App\Http\Requests\Permission\UpdateRequest;

VIDEO 47:
098. Modificar el método destroy del controlador app\Http\Controllers\PermissionController.php
    ***
    ***

*** COMMIT 8: "CRUD de permisos" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "CRUD de permisos" ***

VIDEO 48:
*** Vaciar tablas de roles y permisos de la BD clinic ***

ASIGNACIÓN DE ROLES A USUARIOS
==============================
099. Crear rol de administrador:
    Rol: Administrador
    Descripción: Este es el rol que tiene todos los permisos dentro del sistema

VIDEO 49:
100. Crear controlador para el modelo app\User.php
    $ php artisan make:controller UserController -r

101. Crear carpeta resources\views\theme\backoffice\pages\user

102. Crear los archivos de vistas del CRUD usuarios:
    resources\views\theme\backoffice\pages\user\create.blade.php
    resources\views\theme\backoffice\pages\user\edit.blade.php
    resources\views\theme\backoffice\pages\user\index.blade.php
    resources\views\theme\backoffice\pages\user\show.blade.php

103. Editar resources\views\theme\backoffice\pages\user\index.blade.php
    ***
    ***

104. Modificar el método index del controlador app\Http\Controllers\UserController.php
    ***
    ***

105. Agregar el la cabecera el modelo de usuario en el controlador app\Http\Controllers\UserController.php
    use App\User;

106. Definir grupo de rutas para el CRUD de usuarios en routes\web.php
    ***
    // Grupo de rutas del backoffice
    Route::group(['middleware' => ['auth'], 'as' => 'backoffice.'], function(){
        ***
        Route::resource('user', 'UserController');
    });
    ***

VIDEO 50:
107. Editar resources\views\theme\backoffice\pages\user\show.blade.php
    ***
    ***

108. Modificar el método show del controlador app\Http\Controllers\UserController.php
    ***
    ***

VIDEO 51:
109. Crear directorio resources\views\theme\backoffice\pages\user\includes

110. Crear plantilla resources\views\theme\backoffice\pages\user\includes\user_nav.blade.php
    ***
    ***

111. Crear método (assign_role) para mostrar formulario para asignar rol en el controlador
    app\Http\Controllers\UserController.php
    ***
    ***

112. Crear método (role_assignment) para asignar los roles en la bd en el controlador
    app\Http\Controllers\UserController.php
    ***
    ***

113. Crear vista resources\views\theme\backoffice\pages\user\assign_role.blade.php
    ***
    ***

VIDEO 52:
114. Crear ruta para la asignación de roles en routes\web.php
    ***
    Route::resource('user', 'UserController');
    Route::get('user/{user}/assign_role', 'UserController@assign_role')->name('user.assign_role');
    Route::resource('role', 'RoleController');
    ***

115. Crear ruta para guardar la asignación de roles en la bd en routes\web.php
    ***
    Route::get('user/{user}/assign_role', 'UserController@assign_role')->name('user.assign_role');
    Route::post('user/{user}/role_assignment', 'UserController@role_assignment')->name('user.role_assignment');
    Route::resource('role', 'RoleController');
    ***

VIDEO 53:
116. Crear rol paciente:
    Nombre: Paciente
    Descripción: Rol predeterminado del sistema

117. Crear rol medico:
    Nombre: Medico
    Descripción: Atiende a pacientes

118. Agregar el la cabecera el modelo de rol en el controlador app\Http\Controllers\UserController.php
    use App\Role;

VIDEO 54:
NOTA: Si en la migración respectiva no creaste los campos de claves foraneas para la tabla role_user,
    entonces crear los siguientes campos:
    role_id	int(10)
    user_id	int(10)

VIDEO 55:
119. Crear método de validación has_role en el modelo app\User.php
    ***
    ***

*** COMMIT 9: "Asignación de roles a usuarios" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Asignación de roles a usuarios" ***

VIDEO 56:
ASIGNACIÓN DE PERMISOS
======================

120. Crear ruta para la asignación de permisos en routes\web.php
    ***
    Route::post('user/{user}/role_assignment', 'UserController@role_assignment')->name('user.role_assignment');
    Route::get('user/{user}/assign_permission', 'UserController@assign_permission')->name('user.assign_permission');
    Route::resource('role', 'RoleController');
    ***

121. Crear ruta para guardar la asignación de permisos en la bd en routes\web.php
    ***
    Route::get('user/{user}/assign_permission', 'UserController@assign_permission')->name('user.assign_permission');
    Route::post('user/{user}/permission_assignment', 'UserController@permission_assignment')->name('user.permission_assignment');
    Route::resource('role', 'RoleController');
    ***

122. Crear método (assign_permission) para mostrar formulario para asignar permisos en el controlador
    app\Http\Controllers\UserController.php
    ***
    ***

123. Crear método (permission_assignment) para asignar los permisos en la bd en el controlador
    app\Http\Controllers\UserController.php
    ***
    ***

VIDEO 57:
*** Reeditando resources\views\theme\backoffice\pages\user\assign_permission.blade.php ***
*** Reeditando app\Http\Controllers\UserController.php ***

VIDEO 58:
NOTA: Si en la migración respectiva no creaste los campos de claves foraneas para la tabla permission_user,
    entonces crear los siguientes campos:
    permission_id	int(10)
    user_id	int(10)

124. Crear los siguientes permisos:
    Nombre: admin_1
    Rol: Administrador
    Descripción: ...

    Nombre: admin_2
    Rol: Administrador
    Descripción: ...

    Nombre: admin_3
    Rol: Administrador
    Descripción: ...

    NOTA: Y siguiendo la misma tónica, crear tres permisos por cada rol.

125. Crear método de validación has_permission en el modelo app\User.php
    ***
    ***

*** COMMIT 10: "Asignación de permisos" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Asignación de permisos" ***

VIDEO 59:
CONFIGURACIÓN PARA EL ROL ADMINISTRADOR
=======================================
126. Editar el archivo .env y escribir en la última línea:
    ADMIN_ROLE=administrador

127. Editar el archivo config\app.php
    <?php

    return [
        'admin_role' => env('ADMIN_ROLE', 'admin'),
    ***

128. Agregar el método de validación is_admin en el modelo app\User.php
    ***
    ***

*** COMMIT 11: "Configuración rol administrador" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Configuración rol administrador" ***

VIDEO 60:
INTEGRIDAD EN LOS PERMISOS
==========================
129. Crear métod verify_permission_integrity en el módelo app\User.php
    ***
    ***

*** COMMIT 12: "Integridad en los permisos" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Integridad en los permisos" ***

VIDEO 61:
ASIGNACIÓN MASIVA DE PERMISO A ROLES
====================================
130. Crear método role_assignment en el modelo app\User.php
    ***
    ***

131. Crear método permission_mass_assignment en el modelo app\User.php
    ***
    ***

*** COMMIT 13: "Asignación masiva de permisos a roles" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Asignación masiva de permisos a roles" ***

VIDEO 62:
ASIGNACIÓN DE ROL POR DEFECTO
=============================

132. Crear ruta welcome en routes\web.php
    ***
    ***

133. Crear ruta home en routes\web.php
    ***
    ***

134. Modificar el métod create del controlador app\Http\Controllers\Auth\RegisterController.php
    ***
    ***

135. Registrar un nuevo usuario:
    Nombre: Nuevo usuario
    Correo: nuevo@usuario.com

    NOTA: Autenticar el usuario con la cuenta de Mailtrap creada al inicio.

136. Editar el archivo .env y escribir en la última línea:
    PATIENT_ROLE=paciente

137. Editar el archivo config\app.php
    <?php

    return [
        'admin_role' => env('ADMIN_ROLE', 'admin'),
        'patient_role' => env('PATIENT_ROLE', 'paciente'),
    ***

*** COMMIT 14: "Asignación de rol por defecto" ***
*** Añadir archivos a la zona index: $ git add .
*** Guardar archivos en repositorio: $ git commit -m "Asignación de rol por defecto" ***

*** Creamos un nuevo repositorio en https://github.com. Le damos el nombre: Sistema de Historia Clínica en Laravel ***
*** Desde la terminal: ***
*** $ git remote add origin https://github.com/petrix12/Sistema-de-Historia-Cl-nica-en-Laravel.git ***
*** $ git push -u origin master ***


